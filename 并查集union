#include<iostream>
#include<cassert>
using namespace std;
class UnionFind {
private:
	int* parent;//parent[i]表示i的父亲节点
	int count;
	//int* sz;//sz[i]表示以i为根的集合中元素个数
	int* rank;//rank[i]表示以i为根的集合所表示的树的层数
public:
	UnionFind(int count) {
		parent = new int[count];
		this->count = count;
		sz = new int[count];
		for (int i = 0; i < count; i++) {
			parent[i] = i;
			sz[i] = 1;
		}
	}
	~UnionFind() {
		delete[] parent;
		delete[] rank;
	}


	int find(int p) {
		assert(p >= 0 && p < count);
		while (p != parent[p]) {//找到根部
			parent[p] = parent[parent[p]];//数据压缩
			p = parent[p];
		}
		return p;

		/*if (p != parent[p]) {
			parent[p] = find(parent[p]);
		}
		return parent[p];*/
	}

	bool isConnected(int p, int q) {
		return find(p) == find(q);
	}

	void unionElements(int p, int q) {
		int pRoot = find(p);
		int qRoot = find(q);
		if (pRoot == qRoot) return;
		if (rank[pRoot] < rank[qRoot]) {
			parent[pRoot] = qRoot;
		}
		else if(rank[qRoot]<rank[pRoot]){
			parent[qRoot] = pRoot;
		}
		else {
			parent[pRoot] = qRoot;
			rank[qRoot] += 1;
		}
	}

};
